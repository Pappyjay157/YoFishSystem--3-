/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.ica.part2;

/**
 *
 * @author s3258780
 */
//file reading libraries
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

//file writing libraries
import static java.nio.file.StandardOpenOption.*;
import java.nio.file.Path;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.io.BufferedOutputStream;

//import for images
import javax.swing.ImageIcon;
import java.awt.image.BufferedImage; 
import javax.imageio.ImageIO;

//import for java dialogs
import javax.swing.JOptionPane;

//table library
import javax.swing.table.TableColumn;

public class YoFishGUI extends javax.swing.JFrame {
    
    
    
    


    /**
     * Creates new form YoFishGUI
     */
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public YoFishGUI() {
        try {
        loadFishData();
        loadPondData();

            //check if arraylist is empty, if so warn and exit
            if (arraylist.isEmpty()) {
                System.out.println("\n!!! Data Error: no data loaded !!!\n");
                System.exit(0);
            }//end of if
            
        //catch FileNotFoundException exception
        } catch (FileNotFoundException ex) {
            System.out.println("\n!!! File Error: " + ex.toString() + " !!!\n");
            System.exit(0);
        } catch (IOException ex) {
            System.out.println("\n!!! File Error: " + ex.toString() + " !!!\n");
            System.exit(0);
        }
        
        //invoke method to preload images
        loadImages();
        
        initComponents();
        
        
        //initialise jtable
        initTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        picPanel = new javax.swing.JPanel();
        picLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        buyButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtable = new javax.swing.JScrollPane();
        YoFishItemTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Yo fish");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        picPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)))), "Item photo"));
        picPanel.setForeground(new java.awt.Color(255, 255, 255));

        picLabel.setBackground(new java.awt.Color(0, 0, 0));
        picLabel.setForeground(new java.awt.Color(255, 255, 255));
        picLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        picLabel.setOpaque(true);

        javax.swing.GroupLayout picPanelLayout = new javax.swing.GroupLayout(picPanel);
        picPanel.setLayout(picPanelLayout);
        picPanelLayout.setHorizontalGroup(
            picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(picPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(picLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addGap(35, 35, 35))
            .addGroup(picPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(itemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        picPanelLayout.setVerticalGroup(
            picPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(picPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(picLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemLabel)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        buyButton.setFont(new java.awt.Font("Cantarell", 1, 16)); // NOI18N
        buyButton.setText("Buy");
        buyButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Cantarell", 1, 16)); // NOI18N
        addButton.setText("Add");
        addButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        quitButton.setBackground(new java.awt.Color(255, 0, 51));
        quitButton.setFont(new java.awt.Font("Cantarell", 1, 16)); // NOI18N
        quitButton.setForeground(new java.awt.Color(51, 51, 51));
        quitButton.setText("Quit");
        quitButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        YoFishItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        YoFishItemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                YoFishItemTableMouseClicked(evt);
            }
        });
        YoFishItemTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                YoFishItemTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                YoFishItemTableKeyReleased(evt);
            }
        });
        jtable.setViewportView(YoFishItemTable);

        jScrollPane1.setViewportView(jtable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 672, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(picPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(picPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        //check if an item is selcted from table
        if (YoFishItemTable.getSelectedRow()>= 0){
            int stock = arraylist.get(listIndex).getStock();
            
            int size;
            size = 16;
            
            Integer [] option = new Integer[size];
            for (int index = 1; index<=size; index++){
                option [index - 1] = index + 4;
            }
            
            //create input dialog
            Object inputValue = JOptionPane.showInputDialog(
                    null, 
                    "Please select the amount of stock you want to add",
                    "Add operation",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    option,
                    option[0]);
            
             if (inputValue != null){
                    //get input
                    int amount = (int)inputValue;
                    
                    add(amount);
                }
                else{
                    JOptionPane.showMessageDialog(null, "Add operation cancelled!!!!!", "Operation cancelled",JOptionPane.CLOSED_OPTION );
                }
        }else{
            JOptionPane.showMessageDialog(null,
                    "Please select an item from the table");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        quit();
    }//GEN-LAST:event_quitButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        if (YoFishItemTable.getSelectedRow()>=0){
            //get stock level
            int stock = arraylist.get(listIndex).getStock();
            
            //check if stock is less than 1
            if (stock < 1){
                String message = ""; 
                message += "Item: " + arraylist.get(listIndex).getItem();  //append item name to message
                message += "Is out of stock";
                JOptionPane.showMessageDialog(null, message, "OUT OF STOCK!!!!!", JOptionPane.WARNING_MESSAGE);
            } else{
                int size;
                
                size = arraylist.get(listIndex).getStock();
                
                Integer [] option = new Integer[size];
                
                //use for loop
                for (int index = 1; index<=size; index++){
                    option [index - 1] = index;
                }
                
                //create input dialog
                Object inputValue = JOptionPane.showInputDialog(
                        null, 
                        "Please enter the amount of the item you want to buy", 
                        "Buy operation", 
                        JOptionPane.QUESTION_MESSAGE, 
                        null, 
                        option, 
                        option [0]);
                
                if (inputValue != null){
                    //get input
                    int amount = (int)inputValue;
                    
                    buy(amount);
                }
                else{
                    JOptionPane.showMessageDialog(null, "Buy operation cancelled!!!!!", "Operation cancelled",JOptionPane.CLOSED_OPTION );
                }
                

            }
        }else{
            JOptionPane.showMessageDialog(null,
                    "Please select an item from the table");
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        quit();
    }//GEN-LAST:event_formWindowClosing

    private void YoFishItemTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YoFishItemTableKeyReleased
        //get selected row and invoke the view method
        listIndex = YoFishItemTable.getSelectedRow();
        view();
    }//GEN-LAST:event_YoFishItemTableKeyReleased

    private void YoFishItemTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YoFishItemTableKeyPressed
        listIndex = YoFishItemTable.getSelectedRow();
        checkLowStock();
        view();
    }//GEN-LAST:event_YoFishItemTableKeyPressed

    private void YoFishItemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_YoFishItemTableMouseClicked
        listIndex = YoFishItemTable.getSelectedRow();
        checkLowStock();
        view();
    }//GEN-LAST:event_YoFishItemTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YoFishGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new YoFishGUI().setVisible(true);
            }
        });
}
    void quit(){
        //get user to confirm quit
        int response = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to quit?",
                "Please confirm Quit request",
                JOptionPane.YES_NO_OPTION
        );
        
        //only proceed if user clicked OK button
        if (response == JOptionPane.YES_OPTION){
            try{
                //attempt to save data
                saveData();	
            } catch (FileNotFoundException e) {
                //warn user
                System.out.println("\n\n!!!!! Output Error: Unable to open output file !!!!!\n" + e.getMessage() + "\n"); 		
            } catch (IOException e) {
                //warn user
                System.out.print("\n\n!!!!! Output Error: File write error !!!!!\n" + e.getMessage() + "\n"); 
            } finally {
                //end message and quit
                System.out.println("\n### Thank you. Program will terminate. ###\n\n");
                System.exit(0);
            }
        }
       
        }
    
    void loadFishData() throws IOException, FileNotFoundException {
        //local variables
        final String INPUT_FILE_PATH = "yo-fish.txt";
        File inputFile = new File(INPUT_FILE_PATH);
        Scanner fileScanner;
        int index=0;
        if (inputFile.exists() && inputFile.isFile()) {
            //instantiate  filescanner to read inputfile
            fileScanner = new Scanner(inputFile);

            //process file
            while (fileScanner.hasNextLine()) {
                //read line
                String line = fileScanner.nextLine().trim();

                //check line is not empty
                if (!line.isEmpty()) {
                    //get tokens from line
                    int id = Integer.parseInt(line.split(DELIMITER)[0]);
                    String item = (line.split(DELIMITER)[1]);
                    double price = Double.parseDouble(line.split(DELIMITER)[2]);
                    int stock = Integer.parseInt(line.split(DELIMITER)[3]);
                    double maxsize = Double.parseDouble(line.split(DELIMITER)[4]);
                    int lowtemp = Integer.parseInt(line.split(DELIMITER)[5]);
                    int hightemp= Integer.parseInt(line.split(DELIMITER)[6]);

                    //add anonymous object to array list
                    arraylist.add(new YoFishItem(id, item, price, stock, maxsize, lowtemp, hightemp));
//System.out.println("In load data From file " + price + "  from arraylist: " + arraylist.get(index++).getPrice());
                }
            }//end of while loop

            //close file stream
            fileScanner.close();
        } else {
            //warn user and exit
            System.out.println("\n!!! File Error: input file '" + inputFile + "' not available !!!\n");
            System.exit(0);
        }
        
    }//end of load
    
   void loadPondData() throws IOException, FileNotFoundException {
        //local variables
        final String INPUT_FILE_PATH = "pondlife.txt";
        File inputFile = new File(INPUT_FILE_PATH);
        Scanner fileScanner;
        int index=0;
        if (inputFile.exists() && inputFile.isFile()) {
            //instantiate  filescanner to read inputfile
            fileScanner = new Scanner(inputFile);

            //process file
            while (fileScanner.hasNextLine()) {
                //read line
                String line = fileScanner.nextLine().trim();

                //check line is not empty
                if (!line.isEmpty()) {
                    //get tokens from line
                    int skuNumber = Integer.parseInt(line.split(DELIMITER)[0]);
                    String product = (line.split(DELIMITER)[1]);
                    String notes= (line.split(DELIMITER)[2]);
                    double maxLength = Double.parseDouble(line.split(DELIMITER)[3]);
                    int minTemp = Integer.parseInt(line.split(DELIMITER)[4]);
                    int maxTemp= Integer.parseInt(line.split(DELIMITER)[5]);
                    double cost = Double.parseDouble(line.split(DELIMITER)[6]);
                    int stock = Integer.parseInt(line.split(DELIMITER)[7]);
                    
                    
                    

                    //add anonymous object to array list
                    arraylist.add(
                            new Adaptor(
                                new PondlifeProduct(skuNumber,product ,notes, maxLength, minTemp, maxTemp, cost , stock)
                            )
                    );
                            
//System.out.println("In load data From file " + price + "  from arraylist: " + arraylist.get(index++).getPrice());
                }
            }//end of while loop

            //close file stream
            fileScanner.close();
        } else {
            //warn user and exit
            System.out.println("\n!!! File Error: input file '" + inputFile + "' not available !!!\n");
            System.exit(0);
        }
        
    }//end of load   
     void saveData() throws IOException, FileNotFoundException {
        //local variables
        final String OUTPUT_FILE_PATH = "output.csv";
        Path path = Paths.get(OUTPUT_FILE_PATH);
        
        //delete file if it exits
        Files.deleteIfExists(path); 

        //create buffered output stream
        BufferedOutputStream output = new
                BufferedOutputStream(Files.newOutputStream(path, CREATE,WRITE));

	//output string
	String report = "";
        
        //loop through the array list
        
        for (YoFishItem array: arraylist){
            //add each field of current bank account object to string, followed by delimiter
            report += array.getId() + DELIMITER;
            report += array.getItem() + DELIMITER;
            report += array.getPrice() + DELIMITER;
            report += array.getStock() + DELIMITER;
            report += array.getMaxsize() + DELIMITER;
            report += array.getLowtemp() + DELIMITER;
            report += array.getHightemp() + "\r\n";
        }
        //transform output string to byte array
        byte data[] = report.getBytes();

        //write byte array to the stream
        output.write(data, 0, data.length);

        //close buffer so stream writes to file
        output.close();

        //confirm data written
        System.out.println( "\n\nData written to file at:" + path.toAbsolutePath().toString() );
    }//end of saveData
     
     //load images
     private void loadImages(){
        //loop through main arraylist
     for (YoFishItem array: arraylist){
            //get fiename and create relative filepath
            String filepath = "pics/" + array.getPicFileName(); 
            //create a bufferedimage object and set to null
            BufferedImage image = null;
            
            //attempt to load image, if eeror occurs, it is not critical
            //so no need to exit application
            try {
                //read image file
		image = ImageIO.read(new File(filepath));
            } catch (IOException e) {
                //warn user voa output pane
		System.err.println("\n\n!!!!! Image Loading Error: !!!!!\n"); 
            } finally {
                //add buffered image to arraylist of images
		picList.add(image);
            }
     }
     }
    
    
    //initailize table
    void initTable(){
        //instaniante table model reference
        model = new YoFishTableModel(columnNames,arraylist);
        
        YoFishItemTable.setModel(model);
        
        //loop through each column of the table
        for (int colIndex = 0; colIndex<YoFishItemTable.getColumnCount(); colIndex++){
            //get current column
            TableColumn column = YoFishItemTable.getTableHeader().getColumnModel().getColumn(colIndex);
            
            //set column title
            column.setHeaderValue(columnNames[colIndex]);
            
        }
            
        
    }
   void view(){
        //report variable
//        String report="";
        
        //construct ouput in report variable
//        report += "### FISH INFORMATION ###\n\n";
//        report += String.format("%10s %s %n","Id:",arraylist.get(listIndex).getId());
//        report += String.format("%10s %s %n","Number",accountList.get(accountIndex).getNumber());
//        report += String.format("%10s %s %n","Balance:",accountList.get(accountIndex).getFormattedBalance());
    
displayImage();
   }
   private void displayImage(){
	
        //clear any text or image in the photo label
        picLabel.setText("");
	picLabel.setIcon(null);
        
        //read image from image arraylist
	BufferedImage image = picList.get(listIndex);
        
        //check if image cannot be read
	if (image == null){
            //set text for missing image
            picLabel.setText("Image not available.");
            itemLabel.setText("");
	} else {
            //create an image icon out of the image
            ImageIcon icon = new ImageIcon( image );
            
            //display image by adding the image icon to the photo label
            picLabel.setIcon(icon);
            itemLabel.setText(arraylist.get(listIndex).getItem());
        }
    }//end of method
    void add(int amount){
        
//        String value = JOptionPane.showInputDialog(
//                null, "How many items do you want to add", 
//                "Add operation", 
//                JOptionPane.QUESTION_MESSAGE
//        );
//        int amount = isValid(value)
        //calculate and set new stock
        
        int stock = arraylist.get(listIndex).getStock() + amount;
        arraylist.get(listIndex).setStock(stock);
        
         //inform user
         String message="";
         message += "Item: " + arraylist.get(listIndex).getItem() + "\n";  //append item name to message
         message += "Unit added: " + amount + "\n"; //append amount added
         message += "New Stock level: " + arraylist.get(listIndex).getStock(); //append new stock level
         
         JOptionPane.showMessageDialog(null, message, "Buy opration", JOptionPane.INFORMATION_MESSAGE);
                 //get new stock
        int newFormattedstock = arraylist.get(listIndex).getStock();
        model.setValueAt(newFormattedstock, listIndex, 3);
        
        checkLowStock();
}         
    
    void buy(int amount){
        int stock = arraylist.get(listIndex).getStock() - amount; 
        arraylist.get(listIndex).setStock(stock);
        
        //inform user
        String message="";
         message += "Sucessfully bought Item: " + arraylist.get(listIndex).getItem() + "\n"; 
         message += "Price " + arraylist.get(listIndex).getFormattedPrice() + "\n";//append item name to message
         message += "Unit bought: " + amount + "\n"; //append amount added
         message += "Stock remaining: " + arraylist.get(listIndex).getStock(); //append new stock level
         
         JOptionPane.showMessageDialog(null, message, "Buy operation", JOptionPane.INFORMATION_MESSAGE);
         int newFormattedstock = arraylist.get(listIndex).getStock();
         model.setValueAt(newFormattedstock, listIndex, 3);
         
         checkLowStock();
    }
    
    void checkLowStock(){
        int stock = arraylist.get(listIndex).getStock();
        int lowStock= 5;
        
        if (stock < lowStock){
            
            String message="";
         message += "Item: " + arraylist.get(listIndex).getItem() + "\n";  //append item name to message
         message += "Has a low stock of: " + arraylist.get(listIndex).getStock(); //append new stock level
         
            JOptionPane.showInternalMessageDialog(null, message, "Low stock warning", JOptionPane.WARNING_MESSAGE);
        }
    }
       

   

    
        
     
     
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable YoFishItemTable;
    private javax.swing.JButton addButton;
    private javax.swing.JButton buyButton;
    private javax.swing.JLabel itemLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jtable;
    private javax.swing.JLabel picLabel;
    private javax.swing.JPanel picPanel;
    private javax.swing.JButton quitButton;
    // End of variables declaration//GEN-END:variables
    
    
    private ArrayList<YoFishItem> arraylist = new ArrayList<>();
    private final String DELIMITER = ",";
    private int listIndex = 0;
    private String [] columnNames = {"ID" , "ITEM", "price", "STOCK", "MAXSIZE", "LOWTEMP", "HIGHTEMP" };
    private YoFishTableModel model;
    private ArrayList<BufferedImage> picList = new ArrayList<>();

   
}
